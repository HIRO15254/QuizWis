// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ユーザー登録等に使用されたアカウントそれぞれに紐づく情報
/// 基本取得・変更はしない方針
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// 認証時に使用されるセッション情報
/// 基本取得・変更はしない
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// 各ユーザーの情報
/// 基本取得・変更はしない
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  userDataId String?   @unique
  userData   UserData? @relation(fields: [userDataId], references: [databaseId])
}

/// 認証用トークン
/// 基本取得・変更はしない
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// ユーザーの情報（実際に取得・変更する用）
model UserData {
  /// データベース上のID。基本使わない。
  databaseId  String  @id @default(cuid()) @map("id")
  /// 各ユーザーが任意につけられるかつUniqueなID
  userId      String  @unique
  /// 各ユーザーの表示名
  name        String
  /// 各ユーザーのプロフィールページの内容
  bio         String?
  /// 各ユーザーemailアドレス
  email       String? @unique
  /// ユーザーのアイコン画像のURL
  iconUrl     String?
  /// ダークテーマ設定
  isDarkTheme Boolean @default(false)

  /// Admin権限の有無
  /// クライアント側からの変更禁止
  isAdmin Boolean @default(false)

  /// nextauth用データ構造と紐づける用。公開しない
  /// 本来はrequiredだがPrismaの仕様上無理
  authUser User?

  /// 得点表示用ルーム
  room     Room?     @relation(fields: [roomId], references: [databaseId])
  roomId   String?
  /// ルーム内での役割
  roomRole RoomRole?

  /// ルーム内での得点
  rule Rule[]

  /// ルーム内アクション関係リレーション
  actions         Action[] @relation("actionUser")
  targetedActions Action[] @relation("targetUser")

  /// 作成日時
  createdAt DateTime @default(now())
  /// 更新日時
  updatedAt DateTime @updatedAt
}

enum RoomRole {
  OWNER
  PLAYER
}

model Room {
  /// データベース上のID
  databaseId     String     @id @default(cuid()) @map("id")
  /// ルーム名
  name           String
  /// ルームが有効かどうか（ルーム一覧に表示するかどうか）
  isActive       Boolean    @default(true)
  /// 参加に必要なパスワード
  hashedPassword String?
  /// 参加中のユーザー
  users          UserData[]

  /// 現在実行中のルール
  currentRule   Rule   @relation("current", fields: [currentRuleId], references: [databaseId])
  currentRuleId String @unique
  /// ルールの履歴
  ruleHistory   Rule[] @relation("history")

  /// 作成日時
  createdAt DateTime @default(now())
  /// 更新日時
  updatedAt DateTime @updatedAt
}

model Rule {
  /// データベース上のID
  databaseId String     @id @default(cuid()) @map("id")
  /// このルールに参加しているユーザー
  users      UserData[]
  /// このルール内で行われたアクション
  actions    Action[]

  currentRoom Room?  @relation("current")
  room        Room   @relation("history", fields: [roomId], references: [databaseId])
  roomId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Action {
  /// データベース上のID
  databaseId   String   @id @default(cuid()) @map("id")
  /// アクションが属するルール
  rule         Rule     @relation(fields: [ruleId], references: [databaseId])
  ruleId       String
  /// アクションを行ったユーザー
  actionUser   UserData @relation("actionUser", fields: [actionUserId], references: [databaseId])
  actionUserId String
  /// アクションを行った対象のユーザー
  targetUser   UserData @relation("targetUser", fields: [targetUserId], references: [databaseId])
  targetUserId String
  /// アクションの種類
  actionType   String

  /// 作成日時
  createdAt DateTime @default(now())
  /// 更新日時
  updatedAt DateTime @updatedAt
}
