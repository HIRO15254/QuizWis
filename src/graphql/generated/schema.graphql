### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input CreateScoreBoardRoomInput {
  name: String!
  password: String
}

input CreateUserDataInput {
  authUserId: ID!
  bio: String
  name: String!
  userId: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DeleteScoreBoardRoomInput {
  databaseId: String!
}

input GetScoreBoardRoomInput {
  databaseId: String!
}

input GetScoreBoardRoomsInput {
  dummy: String
}

input GetUserDataInput {
  userId: String!
}

input JoinScoreBoardRoomInput {
  databaseId: String!
  password: String
}

input LeaveScoreBoardRoomInput {
  databaseId: String!
}

type Mutation {
  """得点表示ルームを作成しオーナーになる"""
  createScoreBoardRoom(input: CreateScoreBoardRoomInput!): ScoreBoardRoom
  createUserData(input: CreateUserDataInput!): UserData

  """自分がオーナーである得点表示ルームを削除する"""
  deleteScoreBoardRoom(input: DeleteScoreBoardRoomInput!): ScoreBoardRoom

  """現在ログインしているアカウントで得点表示ルームに参加する"""
  joinScoreBoardRoom(input: JoinScoreBoardRoomInput!): ScoreBoardRoom

  """現在ログインしているアカウンを得点表示ルームから退出させる"""
  leaveScoreBoardRoom(input: LeaveScoreBoardRoomInput!): ScoreBoardRoom
  switchDarkTheme: UserData
  updateScoreBoardRoom(input: UpdateScoreBoardRoomInput!): ScoreBoardRoom
  updateUserData(input: UpdateUserDataInput!): UserData
}

interface Node {
  id: ID
}

type Query {
  getScoreBoardRoom(input: GetScoreBoardRoomInput!): ScoreBoardRoom

  """得点表示ルーム一覧を取得する"""
  getScoreBoardRooms(input: GetScoreBoardRoomsInput): [ScoreBoardRoom]
  getUserData(input: GetUserDataInput!): UserData
  loginUser: UserData
  node(id: String!): Node
}

"""現在行われているラウンドのデータ"""
type Round implements Node {
  """作成日時"""
  createdAt: DateTime!

  """データベース上のID"""
  databaseId: ID!

  """relay仕様のID"""
  id: ID!

  """このラウンドが行われているルーム"""
  scoreBoardRoom: ScoreBoardRoom!

  """最終更新日時"""
  updatedAt: DateTime!
}

"""現在開かれている得点表示ルームのデータ"""
type ScoreBoardRoom implements Node {
  """作成日時"""
  createdAt: DateTime!

  """データベース上のID"""
  databaseId: ID!

  """パスワードがかかっているか"""
  hasPassword: Boolean!

  """参加に必要なパスワード"""
  hashedPassword: String

  """relay仕様のID"""
  id: ID!

  """この部屋のオーナーであるか"""
  isOwner: Boolean!

  """ルーム名"""
  name: String!

  """現在行われているラウンド"""
  round: Round

  """最終更新日時"""
  updatedAt: DateTime!

  """参加中のユーザー(との中間テーブル)"""
  users: [User_ScoreBoardRoom!]!
}

enum ScoreBoardRoomRole {
  MEMBER
  OWNER
}

input UpdateScoreBoardRoomInput {
  databaseId: String!
  name: String
}

input UpdateUserDataInput {
  bio: String
  email: String
  iconUrl: String
  isDarkTheme: Boolean
  name: String
  newUserId: String
  userId: String!
}

"""ユーザーの情報"""
type UserData implements Node {
  """各ユーザーのプロフィールページの内容"""
  bio: String

  """作成日時"""
  createdAt: DateTime!

  """データベース上のID"""
  databaseId: ID!

  """各ユーザーemailアドレス"""
  email: String

  """ユーザーのアイコン画像のURL"""
  iconUrl: String

  """relay仕様のID"""
  id: ID!

  """Admin権限の有無 (変更禁止)"""
  isAdmin: Boolean!

  """ダークテーマ設定"""
  isDarkTheme: Boolean!

  """各ユーザーの表示名"""
  name: String!

  """参加中のラウンド情報"""
  rounds: User_Round

  """参加中のルーム情報"""
  scoreBoardRooms: [User_ScoreBoardRoom!]!

  """最終更新日時"""
  updatedAt: DateTime!

  """各ユーザーが任意につけられるかつUniqueなID"""
  userId: String!
}

"""ユーザーと現在のラウンドの中間テーブル"""
type User_Round {
  databaseId: ID!
  round: Round!
  userData: UserData!
}

"""ユーザーと得点表示ルームの中間テーブル"""
type User_ScoreBoardRoom {
  """ユーザーの得点表示ルーム内での権限"""
  role: ScoreBoardRoomRole!
  scoreBoardRoom: ScoreBoardRoom!
  scoreBoardRoomId: String!
  userData: UserData!
  userDataId: String!
}