### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Action implements Node {
  """アクションの種類"""
  actionType: String!

  """アクションを行ったユーザー"""
  actionUser: UserData!

  """作成日時"""
  createdAt: DateTime!

  """データベース上のID"""
  databaseId: ID!
  id: ID!

  """アクションが属するルール"""
  rule: Rule!

  """アクションを行った対象のユーザー"""
  targetUser: UserData!

  """更新日時"""
  updatedAt: DateTime!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input CreateRoomInput {
  name: String!
  password: String
}

input CreateUserDataInput {
  authUserId: ID!
  bio: String
  name: String!
  userId: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input GetRoomInput {
  databaseId: String!
}

input GetRoomsInput {
  isActive: Boolean
}

input GetUserDataInput {
  userId: String!
}

input JoinRoomInput {
  databaseId: String!
  password: String
}

type Mutation {
  createRoom(input: CreateRoomInput!): Room
  createUserData(input: CreateUserDataInput!): UserData
  joinRoom(input: JoinRoomInput!): Room
  leaveRoom: Room
  switchDarkTheme: UserData
  updateUserData(input: UpdateUserDataInput!): UserData
}

interface Node {
  id: ID
}

type Query {
  getRoom(input: GetRoomInput!): Room
  getRooms(input: GetRoomsInput!): [Room]
  getUserData(input: GetUserDataInput!): UserData
  loginUser: UserData
  node(id: String!): Node
}

type Room implements Node {
  """作成日時"""
  createdAt: DateTime!

  """現在実行中のルール"""
  currentRule: Rule!

  """データベース上のID"""
  databaseId: ID!
  hasPassword: Boolean!

  """参加に必要なパスワード"""
  hashedPassword: String
  id: ID!

  """ルームが有効かどうか（ルーム一覧に表示するかどうか）"""
  isActive: Boolean!

  """ルーム名"""
  name: String!

  """ルールの履歴"""
  ruleHistory: [Rule!]!

  """更新日時"""
  updatedAt: DateTime!

  """参加中のユーザー"""
  users: [UserData!]!
}

enum RoomRole {
  OWNER
  PLAYER
}

type Rule implements Node {
  """このルール内で行われたアクション"""
  actions: [Action!]!
  createdAt: DateTime!
  currentRoom: Room

  """データベース上のID"""
  databaseId: ID!
  id: ID!
  room: Room!
  updatedAt: DateTime!

  """このルールに参加しているユーザー"""
  users: [UserData!]!
}

input UpdateUserDataInput {
  bio: String
  email: String
  iconUrl: String
  isDarkTheme: Boolean
  name: String
  newUserId: String
  userId: String!
}

"""ユーザーの情報（実際に取得・変更する用）"""
type UserData implements Node {
  """ルーム内アクション関係リレーション"""
  actions: [Action!]!

  """各ユーザーのプロフィールページの内容"""
  bio: String

  """作成日時"""
  createdAt: DateTime!

  """データベース上のID。基本使わない。"""
  databaseId: ID!

  """各ユーザーemailアドレス"""
  email: String

  """ユーザーのアイコン画像のURL"""
  iconUrl: String
  id: ID!

  """Admin権限の有無\nクライアント側からの変更禁止"""
  isAdmin: Boolean!

  """ダークテーマ設定"""
  isDarkTheme: Boolean!

  """各ユーザーの表示名"""
  name: String!

  """得点表示用ルーム"""
  room: Room
  roomId: String
  roomRole: RoomRole

  """ルーム内での得点"""
  rule: [Rule!]!
  targetedActions: [Action!]!

  """更新日時"""
  updatedAt: DateTime!

  """各ユーザーが任意につけられるかつUniqueなID"""
  userId: String!
}